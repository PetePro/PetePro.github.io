---
layout: post
title:  "【DB】数据库原理"
crawlertitle: "数据库原理"
summary: "Database"
date:   2020-02-15 09:00:00 +0800
categories: posts
tags: 'CSSE'
author: xusc
---

数据库知识点整理

事务的ACID特性：
- 原子性（Atomicity）
- 一致性（Consistency）——执行结果正确
- 隔离性（Isolation）
- 持久性（Durability）——应对系统奔溃

并发一致性问题。产生原因：破坏了事务的隔离性；解决方法：并发控制。
- 丢失修改
- 读脏数据
- 不可重复读
- 幻读

#### 封锁
封锁粒度：行级锁、表级锁

封锁类型：
1. 读写锁
   - 互斥锁（Exclusive），简写为 X 锁，又称写锁。
   - 共享锁（Shared），简写为 S 锁，又称读锁。
2. 意向锁
   - 一个事务在获得某个数据行对象的 S 锁之前，必须先获得表的 IS 锁或者更强的锁；
   - 一个事务在获得某个数据行对象的 X 锁之前，必须先获得表的 IX 锁。

封锁协议
- 三级封锁协议
  1. 一级封锁协议：事务 T 要修改数据 A 时必须加 X 锁，直到 T 结束才释放锁。可以解决丢失修改问题。
  2. 二级封锁协议：在一级的基础上，要求读取数据 A 时必须加 S 锁，读取完马上释放 S 锁。可以解决读脏数据问题。
  3. 三级封锁协议：在二级的基础上，要求读取数据 A 时必须加 S 锁，直到事务结束了才能释放 S 锁。可以解决不可重复读的问题。
- 两段锁协议：加锁和解锁分为两个阶段进行。
  - 可串行化调度：通过并发控制，使得并发执行的事务结果与某个串行执行的事务结果相同。
  - 事务遵循两段锁协议是保证可串行化调度的充分条件。

#### 隔离级别
- 未提交读（READ UNCOMMITTED）：事务中的修改，即使没有提交，对其它事务也是可见的。
- 提交读（READ COMMITTED）：一个事务只能读取已经提交的事务所做的修改。
- 可重复读（REPEATABLE READ）：保证在同一个事务中多次读取同一数据的结果是一样的。
- 可串行化（SERIALIZABLE）：强制事务串行执行，这样多个事务互不干扰，不会出现并发一致性问题。

多版本并发控制（Multi-Version Concurrency Control, MVCC）是 MySQL 的 InnoDB 存储引擎实现隔离级别的一种具体方式，用于实现提交读和可重复读这两种隔离级别。在 MVCC 中事务的修改操作（DELETE、INSERT、UPDATE）会为数据行新增一个版本快照。

Next-Key Locks 是 MySQL 的 InnoDB 存储引擎的一种锁实现。在可重复读（REPEATABLE READ）隔离级别下，使用 MVCC + Next-Key Locks 可以解决幻读问题。

### 关系数据库理论
- 函数依赖：记 A->B 表示 A 函数决定 B，也可以说 B 函数依赖于 A。
- 对于 A->B，如果能找到 A 的真子集 A'，使得 A'-> B，那么 A->B 就是部分函数依赖，否则就是完全函数依赖。
- 键码：如果 {A1，A2，... ，An} 是关系的一个或多个属性的集合，该集合函数决定了关系的其它所有属性并且是最小的，那么该集合就称为键码。

#### 范式
不符合范式的关系，会产生主要四种异常：
- 冗余数据
- 修改异常
- 删除异常
- 插入异常

1. 第一范式 (1NF)：属性不可分。
2. 第二范式 (2NF)：每个非主属性完全函数依赖于键码。可以通过分解来满足。
3. 第三范式 (3NF)：非主属性不传递函数依赖于键码。
4. BCNF
5. 第四范式 (4NF)：

### ER图
Entity-Relationship，有三个组成部分：实体、属性、联系。

### SQL
SQL（Structured Query Language)，结构化查询语言，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。

#### 查询
- 关键字
  - DISTINCT：相同值只会出现一次。它作用于所有列，所有列的值都相同才算相同。
  - LIMIT：限制返回的行数。
  - 排序：ASC -升序（默认）、DESC -降序。
  - UNION：组合查询并且去除重复的数据。
  - except：去重之后保留第一个表中的数据。
  - intersect：查询两个结果集中的并集。
- 通配符。通配符位于开头处匹配会非常慢。
  - `%` 匹配 >=0 个任意字符；
  - `_` 匹配 ==1 个任意字符；
  - `[]` 可以匹配集合内的字符。
- 分组：
  - WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。
  - GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；
  - 除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；
  - NULL 的行会单独分为一组；
  - 大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。
- 连接：JOIN 
  - 内连接：又称等值连接，使用 INNER JOIN 关键字。等价于普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。
  - 自连接：内连接的一种，只是连接的表是自身而已。
  - 自然连接：自动把同名列通过等值测试连接起来的，同名列可以有多个。
  - 外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接。

#### 视图
视图是虚拟的表，本身不包含数据，不能对其进行索引操作。对视图的操作和对普通表的操作一样。

视图具有如下好处：
- 简化复杂的 SQL 操作，比如复杂的连接；
- 只使用实际表的一部分数据；
- 通过只给用户访问视图的权限，保证数据的安全性；
- 更改数据格式和表示。

#### 存储
- 存储过程可以看成是对一系列 SQL 操作的批处理。使用存储过程的好处：
  - 代码封装，保证了一定的安全性；
  - 代码复用；
  - 由于是预先编译，因此具有很高的性能。
- 在存储过程中使用游标可以对一个结果集进行移动遍历。使用游标的步骤：
  1. 声明游标；
  2. 打开游标；
  3. 取出数据；
  4. 关闭游标；

触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。触发器中 BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。

#### 事务
- 事务（transaction）指一组 SQL 语句；
- 回退（rollback）指撤销指定 SQL 语句的过程；
- 提交（commit）指将未存储的 SQL 语句结果写入数据库表；
- 保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退

MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。

