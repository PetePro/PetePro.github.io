---
layout: post
title:  "【OO】面向对象"
crawlertitle: "面向对象"
summary: "面向对象知识整理"
date:   2019-10-24 09:00:00 +0800
categories: posts
tags: 'SE'
author: xusc
bg: "SE.jpg"
---

面向对象知识整理

### 三大特性
- 封装：利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。
- 继承
- 多态
  - 编译时多态主要指方法的重载
  - 运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定。运行时多态有三个条件：
    - 继承
    - 覆盖（重写）
    - 向上转型：父类引用指向子类对象。

### 关系
- 泛化 (Generalization)：用来描述继承关系，在 Java 中使用 extends 关键字。
- 实现 (Realization)：用来实现一个接口，在 Java 中使用 implements 关键字。
- 聚合 (Aggregation)：表示整体由部分组成，但是整体和部分不是强依赖的，整体不存在了部分还是会存在。
- 组合 (Composition)：表示整体由部分组成，但是整体和部分是强依赖的，整体不存在了部分也不存在了。
- 关联 (Association)：表示不同类对象之间有关联，这是一种静态关系，与运行过程的状态无关，在最开始就可以确定。
- 依赖 (Dependency)：表示不同类对象之间有关联，依赖关系是在运行过程中起作用的。依赖的形式：
  - A 类是 B 类方法的局部变量；
  - A 类是 B 类方法的参数；
  - A 类向 B 类发送消息，从而影响 B 类发生变化。

### 设计原则
1. 单一职责原则（SRP）：修改一个类的原因应该只有一个。
2. 开放封闭原则（OCP）：类应该对扩展开放，对修改关闭。
3. 里氏替换原则（LSP）：子类对象必须能够替换掉所有父类对象。子类需要能够当成父类来使用，并且需要比父类更特殊。
4. 接口分离原则（ISP）：不应该强迫客户依赖于它们不用的方法。
5. 依赖倒置原则（DIP）：高层模块不应该依赖于低层模块，二者都应该依赖于抽象；抽象不应该依赖于细节，细节应该依赖于抽象。具体来说：
   - 任何变量都不应该持有一个指向具体类的指针或者引用；
   - 任何类都不应该从具体类派生；
   - 任何方法都不应该覆写它的任何基类中的已经实现的方法。
6. 迪米特法则（LOD）：一个对象应当对其他对象有尽可能少的了解，不和陌生人说话。