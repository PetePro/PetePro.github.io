---
layout: post
title:  "【软件工程】软件工程经典名著"
crawlertitle: "编程，一个许多人痛苦挣扎的焦油坑以及一种乐趣和苦恼共存的创造性活动"
summary: "软件工程著作整理"
date:   2019-09-01 09:00:00 +0800
categories: posts
tags: '阅读'
author: xusc
---

软件工程诞生至今，该领域也出现了许多阐释其思想、管理、方法、理论的书籍，不单单局限于编程技术的本身。

## 《人月神话》
《人月神话》是由IBM System/360系统之父佛瑞德·布鲁克斯所著经典文集，全书讲解软件工程、项目管理相关课题，被誉为软件领域的圣经，内容源于作者布鲁克斯在IBM公司System/360家族和OS/360中的项目管理经验。

#### 焦油坑
1. 编程，一个许多人痛苦挣扎的焦油坑以及一种乐趣和苦恼共存的创造性活动。

#### 人月神话
1. 人月是危险和带有欺骗性的神话。
2. Brooks法则：为进度落后的项目增派人手，只会使进度更加落后。

#### 外科手术队伍
1. 小型、精干的队伍是最好的。
2. 一位首席工程师、类似于外科手术队伍的团队架构提供了一种方法——既能获得由少数头脑产生的产品完整性，又能得到多位协助人员的总体生产率，还彻底地减少了沟通的工作量。

#### 贵族专制、民主政治和系统设计
1. 概念完整性是系统设计中最重要的考虑因素。
2. 功能与理解上的复杂度的比值才是系统设计的最终测试标准。

#### 画蛇添足
1. 第二个系统是人们所设计的最危险的系统。

#### 贯彻执行
1. 出于精确性考虑，需要形式化地设计定义。需要记叙性定义加深理解。

#### 为什么巴比伦塔会失败
1. 巴比伦塔失败是因为缺乏交流以及交流的结果——组织，包括项目工作手册和组织架构。

#### 胸有成竹
1. 仅仅通过对编码部分时间的估计，然后乘以其他部分的相对系数，是无法得到对整项工作的精确估计的。
2. 当使用适当的高级语言时，程序编制的生产率可以提高5倍。

#### 削足适履
1. 除了运行时间外，程序所占据的内存空间也是主要开销。
2. 数据的表现形式时编程的根本。

#### 提纲挈领
1. 项目经理应该在项目早期对上述的一系列文档进行规范化。

#### 未雨绸缪
1. 为舍弃而计划。
2. 为变更计划组织架构。
3. 前进两步，后退一步——程序维护。
4. 前进一步，后退一步——系统熵随时间增加。

#### 干将莫邪
1. 调试工作总是在夜间完成。
2. 高级语言不仅提高了生产率，还改进了调试。
3. 交互式编程的生产率至少是原来的两倍。

#### 整体部分
1. 在编写任何代码之前， 规格说明必须提交给测试小组， 以详细地检查说明的完整性和明确性。

#### 祸起萧墙
1. 项目延迟是难以识别、 更不容易防范和更加难以弥补的。
2. PERT 的准备工作是 PERT 图使用中最有价值的部分。

#### 另外一面
1. 文档能在整个生命周期对克服懒惰和进度的压力起促进激励作用。

#### 没有银弹
1. 软件开发中的困难部分：规格说明、设计和测试。
2. 根本困难：软件系统的内在特性：复杂度、一致性、可变性、不可见性。
3. 一些突破：高级语言、分时。
4. 银弹的希望：高级语言、面向对象编程、人工智能、专家系统、“自动”编程、图形化编程、程序验证、环境和工具、工作站。
5. 颇具前途的方法：购买、增量开发、需求精炼、卓越的开发人员。

## 《人件》
《人件》从管理人力资源、创建健康的办公环境、雇佣并留用正确的人、高效团队形成、改造企业文化和快乐工作等多角度阐释了如何思考和管理软件开发的最大问题——人，而不是技术，以得到高效的项目和团队。

#### 管理人力资源
一种迥然不同的思考人及管理人的办法——适应人的“非模块化”特征
1. 我们的成功源自于所有参与者良好的人与人之间的互动，我们的失败则归因于这种互动的缺失。
2. 员工的独特性使得项目团队产生了化学反应。
3. 多花时间在思考上，少花时间在实施上。
4. 帕金森定律：工作会自动膨胀，沾满一个人可以用的所有时间。
5. 管理者的作用不是让大家去工作，而是创造环境。

#### 办公环境
创建健康、利于工作的环境
1. 警察思维的规划者设计出来的工作环境就跟设计监狱一样：用最小的成本达到最好的封闭性。
2. 在工作环境的设计上采取弃权政策是一个错误。
3. 在环境上省了钱，却可能会浪费掉你一笔不小的财富。
4. 度量体系就是自我评估的一个练习，只有处理过的平均值才会交给老板。
5. E参数=不被打断的小时数/出勤时间的小时数——E参数能够帮助我们改变公司的文化，让大家意识到不要随意打断别人。
6. 任何精密装置都比不上改变观念来的重要。对于花费时间，质量胜于数量。
7. 有意工作的办公室不是地位的象征，而是一种必需品；环境对创造力带来的负面影响并不显眼；管理要做得最好，就应该保证为大家提供足够的空间、足够的安宁以及足以保护好个人隐私的方法，让大家能够创造自己的可工作空间。
8. 成功的空间设计考虑了人性化的功用——人既是个体的人，又是群体的人。人的个体属性和集体倾向性都得到了认可，从而让人能够自由发挥。

#### 正确的人
找到合适的人->让他们愉快工作，不愿离开->让他们自由发挥
1. 管理热力学第二定律：组织里的熵总是增加的。最成功的管理者总是能摇动熵、带来正确的员工，并让他们展现自我，甚至允许他们偏离公司的标准。
2. 不依靠授权来领导的倾向，是人们能够创新以及敢于突破行业规则的标志。
3. 我们应该珍惜不同的工作、思考及交流方式。
4. 在这个带宽急剧增长的年代，最炙手可热的科技却是使用最少带宽的工具。
5. 重新培训能够帮助组织树立永恒之地的观念，从而形成低离职率和强烈的社区感。
6. 依靠脑力劳动者的公司必须认识到他们在人力资本上的投资是至关重要的。

#### 高效团队养成
当团队成为一个整体时，大家工作会变得更好、更富有乐趣
1. 团队存在的目标不是达成目标，而是让目标一致。
2. 有凝聚力团队的标志：1)在项目和任务执行中的低人员流失率；2)有很强的自我认知；3)有精英的感觉；4)对生产出来的产品有很强的归属感；5)队员们工作乐在其中。
3. 团队自毁的因素：防御式管理、官僚主义、物理分隔、时间碎片、牺牲产品质量、伪造截至日期、团伙控制、可恶的标语和纪念碑、加班。
4. 音乐组合是对形成凝聚力小组更贴切的隐喻。
5. 最棒的成功就是看不到任何明显的管理，团队是平等而友好个体的聚合，在一起努力工作。
6. 在敞开和服的氛围下，团队有最大的融合可能。
7. 健康组织构成策略的化学元素：建立对质量的执着追求、提供诸多满意的闭环、建立精英意识、允许和鼓励差异性、维护和保护成功团队、提供战略而不是战术方向。
8. 团队的结构是一个网络，而非分层结构。

#### 沃土
企业文化：更大的组织结构提供的环境
1. 在某种意义上，工作或管理的组织就是一个系统，它是互相协作的人为达成某种目标的过程的混合物。
2. 项目风险是一件好事，说明项目是有价值的。
3. 你改变不了你的公司，但你可以改变你的地盘，还有那些和你一起工作的同事和下属。最重要的是，削减你自己需要用仪式会议来做确认的需求。
4. 终极的管理罪恶是浪费大家时间。
5. 如果你需要知道所有才能工作，你可能走不了多远。
6. 对改变的基本反应并非逻辑思考得来的，而是情绪化的；混乱是改变的必经阶段；改变只有在容忍失败的情况下才能成功。
7. 在任何规模的组织中，最适宜的学习中心通常都位于中层管理者之间的空白地带。
8. 能够成功构建社区的组织更能留住人。

#### 快乐地工作
工作就应该是快乐的
1. 好的秩序是我们日常工作之所需，但我们依然希望能够看到一些冒险和一些适当的具有建设意义的无序性：试点项目；战争游戏；头脑风暴；继发性训练；培训、旅行、会议、庆祝和撤退。
2. 自由电子：可以自行决定自己的工作。最好的管理者就在于有能力找出少数几个关键的苗子，然后放手让他们去干。

## 《黑客与画家》
保罗·格雷厄姆的创业公式=搭建原型+上线运营（别管bug）+收集反馈+调整产品+成长壮大

黑客伦理：
- 使用计算机以及所有帮助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试
- 所有信息应该都是自由的
- 不信任权威，提倡去中心化
- 判断一名黑客的水平应该看到他的技术能力，而不是看他的学历、年龄或地位等其它标准
- 你可以用计算机创造美术和艺术
- 计算机使生活更美好

#### 黑客的成长和世界观
1. 为什么书呆子不受欢迎，因为他们的心思在别的地方。
2. 真实世界的关键并非在于它是由成年人组成的，而在于它的庞大规模使得你做的每件事都能产生真正意义上的的效果。
3. 黑客也是创作者，与画家、建筑师、作家一样。
   - 画家学习绘画的方法主要是动手去画，而黑客通过实践学习编程；
   - 画家通过临摹大师作品学习，黑客可以通过观看优秀的程序学会编程；
   - 绘画是逐步完成的，先是草图再逐步填细节，黑客也是如此；
   - 多个画家共同创作一幅画的时候，每个人画的部分都是不一样的，这也是很多人开发一个软件的正确模式；
   - 就像绘画作品一样，大多数软件是为人类用户准备的。
4. “不能说的话”
   - 找出“不能说的话”：1)判断言论的真伪，2)关注异端邪说，3)回顾过去与现在的时空差异，4)寻找一本正经的卫道者在捍卫什么，5)观察禁忌如何产生。
   - 为什么这样做：优秀作品往往来自于其他人忽视的想法，而最被人忽视的想法就是那些被禁止的观点。
   - 如何应对：自由思考比畅所欲言更重要，更好的回答是“我还没想好”，永远保持质疑。
5. 不服从管教，是黑客成为优秀程序员最重要的原因之一。黑客的成功秘诀就是打破常规。

#### 黑客的成果和影响
1. 下一个潮流——互联网软件，互联网软件与桌面软件最显著的区别就是，前者不是一个单独的代码块。
2. 致富最好的办法就是自己创业，或者加入创业公司。要致富，你需要两样东西：可测量性和可放大性。
   - 小团体=可测量性。团队越小，每个人的工作成绩越容易衡量；团队越大，每个人的贡献就越接近于整体的平均值。
   - 高科技=可放大性。回顾历史，大多数因为创造财富而发财的人都是通过开发新技术而实现的。
3. 创业的潜规则：1)很多事情由不得你；2)付出与回报虽然总体上是成比例的，但是个体上是不成比例的。
4. 技术在加大收入差距的同时，缩小了大部分的其它差距。一个社会需要富人，主要不是因为你需要富人的支出创造就业机会，二是因为他们在致富过程做出的事情。
5. 过滤垃圾邮件是可以做到的，基于内容的过滤器将发挥作用。单独来看，“贝叶斯过滤”是最有效的工具；使用不同方法越多，综合效果就越好。
6. 优秀的设计原则
   - 好设计是简单的设计；
   - 好设计是永不过时的设计；
   - 好设计是解决主要问题的设计；
   - 好设计是启发性的设计；
   - 好设计通常是有点趣味性的设计；
   - 好设计是艰苦的设计；
   - 好设计是看似容易的设计；
   - 好设计是对称的设计：重复性对称和递归性对称；
   - 好设计是模仿大自然的设计；
   - 好设计是一种再设计；
   - 好设计是成批出现的；
   - 好设计是大胆的设计。

#### 黑客文化的基础和核心

## 《编程珠玑》

#### 基础
对实例研究的深入思考不仅很有趣，而且可以获得实际的益处
1. 程序员在节省空间方面无计可施时，将自己从代码中解脱出来，退回起点并集中心力研究数据，常常能有奇效。数据的表示形式就是程序设计的根本。
2. 退回起点思考的原则：1)使用数组重新编写重复代码；2)封装复杂结构；3)尽可能使用高级工具；4)从数据得出程序的结构。

#### 性能
程序员的终极目标：简单而又功能强大，令用户欣喜而又不令开发者烦恼
1. 计算机系统中最廉价、最快速且最可靠的元件是根本不存在的。如果需要较小的加速，就对效果最佳的层面做改进；如果需要较大的加速，就对多个层面做改进。
2. 粗略估算的基本技巧：两个答案比一个答案好、快速检验、经验法则、实践。
3. 算法设计技术：1)保存状态，避免重复设计；2)将信息预处理至数据结构中；3)分治算法；4)扫描算法；5)累加数组；6)下界。
4. 代码调优的最重要原理就是尽量少用它。
5. 数据空间技术：重新计算、稀疏结构、数据压缩、分配策略、垃圾回收，代码空间技术：函数定义、解释程序、翻译成机器语言。

#### 应用
1. 作者对程序员的10条建议：解决正确的问题，探索所有可能的解决方案，观察数据，使用粗略估算，利用对称性，利用组件做设计，建立原型，必要时进行权衡，保持简单，追求优美。
2. 代码调优法则：
   - 空间换时间法则（修改数据结构、存储预先计算好的结果、高速缓存、懒惰求值）
   - 时间换空间法则（堆积、解释程序）
   - 循环法则（将代码移出循环、合并测试条件、循环展开、删除赋值、消除无条件分支、循环合并）
   - 逻辑法则（利用等价代数表达式、短路单调函数、对测试条件重新排序、预先计算逻辑函数、消除布尔变量）
   - 过程法则（打破函数层次、高效处理常见情况、协同程序、递归函数转换、并行性）
   - 表达式法则（编译时初始化、利用等价代数表达式、消除公共子表达式、成对计算、利用计算机字的并行性）

