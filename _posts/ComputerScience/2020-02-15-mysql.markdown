---
layout: post
title:  "【DB】数据库 总结 02 MySQL"
crawlertitle: "MySQL"
summary: "Database——MySQL"
date:   2020-02-15 09:00:00 +0800
categories: posts
tags: 'CS'
author: xusc
bg: "CS.jpg"
---

`MySQL` 是一种关系型数据库管理系统，使用标准数据库查询语言 SQL。

### SQL

#### 数据类型
1. 整型：`TINYINT` - 8，`SMALLINT` - 16，`MEDIUMINT` - 24，`INT` - 32，`BIGINT` - 64。
2. 浮点型：`FLOAT` 和 `DOUBLE` 为浮点类型，`DECIMAL` 为高精度小数类型。
3. 字符串：`CHAR` - 定长，`VARCHAR` - 变长。
4. 时间日期：`DATETIME` 和 `TIMESTAMP`。

#### 数据库语句
- 数据库定义语言 DDL：`CREATE`、`DROP`、`ALTER`、`TRUNCATE`（效率上 TRUNCATE 比 DELETE 快，但由于删除后不会记录日志，所以不可恢复数据）；
- 数据库控制语言 DCL：`GRANT`、`DENY`、`REVOKE`；
- 数据库操纵语言 DML
  - 基本操作：选择：`SELECT`（投影）；数据源：`FROM`（笛卡尔积）；条件：`WHERE`（选择）；排序：`ORDER BY`（正序：`ASC`、倒序：`DESC`）；
  - 集合操作：差集：`UNION`、`UNION ALL`；交集：`INTERSECT`、`INTERSECT ALL`；差集：`EXCEPT`、`EXCEPT ALL`；
  - 聚集操作：分组：`GROUP BY`；条件：`HAVING`、`WHERE`；平均值：`AVG`；最值：`MIN`、`MAX`；总和：`SUM`；计数：`COUNT`；
    - 先根据 WHERE 筛选，再进行行分组，最后根据 HAVING 筛选
  - 嵌套子查询：包含：`IN`、`NOT IN`；比较：`SOME`、`ALL`；全称：`ALL`；特称：`SOME`；存在：`EXIST`；重复：`UNIQUE`、`NOT UNIQUE`；
  - 死循环插入：`INWERT INTO TABLE SELECT * FROM TABLE`；
  - 连接操作：内连接：`INNER JOIN`；左连接：`LEFT JOIN`；右连接：`RIGHT JOIN`；全连接：`FULL OUTER JOIN`；外连接：`OUTER JOIN`。

![](/assets/images/2020/SQL_JOINS.jpg)

#### 存储过程与函数
避免开发人员编写大量重复的 SQL 语句，都是在 MySQL 服务器运行，减少客户端与服务器之间的数据传输。

- 存储过程
  - 实现更复杂的功能，包括修改表、全局数据库状态等一系列数据库操作。
  - 作为独立部分执行，SQL 语句中不能使用。
  - 与数据库实现绑定，降低程序可移植性。
  - 在存储过程中使用游标可以对一个结果集进行移动遍历。
- 函数
  - 实现定制化功能，可作为查询语句的一部分调用，在 SQL 语句中使用。




### 索引

#### 索引类型（按约束）
- 单列索引
  - **普通索引**：这是最基本的索引，它没有任何限制。
    - 如查询条件中包含索引，会在查找到匹配的记录后继续查找下一个记录，直到碰到第一个不满足条件的记录。
    ```sql
    KEY(id)
    ```
  - **唯一索引**：索引列的值必须唯一，但允许有空值。
    - 如查询条件中包含索引，会在找到第一个满足条件的记录后停止检索立即返回；
    - 如果查询条件满足与不满足的记录分布恰好在不同的页，则其唯一的特性效果会很明显；
    ```sql
    UNIQUE KEY(id)
    ```
  - **主键索引**：是一种特殊的唯一索引，不允许有空值。
    - 自增 ID
    - 业务字段
    ```sql
    PRIMARY KEY(id)
    ```
- 组合索引：在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。
  ```sql
  KEY MultiIdx(id, name, age)
  ```

#### 索引分类（按结构）
索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。
1. B+ Tree 索引
   - B+ Tree 是大多数 MySQL 存储引擎的默认索引类型。适用于**全键值**、**键值范围**和**键最左前缀**查找，否则索引会失效。
   - 除了用于查找，还可以用于排序和分组。
   - InnoDB 的 B+ Tree 索引分为主索引和辅助索引。
     - 聚簇索引（主索引）：叶子节点 data 域记录着完整的数据记录。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。
     - 辅助索引（二级索引）：叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。
   - 比之红黑树的优势：
     1. 更少的查找次数；
     2. 利用磁盘预读特性（叶子节点形成有序链表）。
2. 哈希索引：InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引。
3. 全文索引：只有在 MyISAM 引擎上才能使用，只能在 CHAR，VARCHAR，TEXT 类型字段上使用全文索引。
4. 空间数据索引：MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。

索引优化
1. 在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数。
2. 在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。
3. 让选择性（不重复的索引值和记录总数的比值。选择性越高，每个记录的区分度越高，查询效率也越高。）最强的索引列放在前面。
4. 对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引。
5. 索引包含所有需要查询的字段的值。




### 存储引擎

- InnoDB 是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻读。主索引是聚簇索引。
- MyISAM 设计简单，数据以紧密格式存储。

比较|InnoDB|MyISAM
:-:|:-:|:-:
事务|支持|不支持
并发|表级锁<br/>行级锁|表级锁
外键|支持|不支持
备份|在线热备份| 
崩溃恢复|快|慢
其它|MySQL 默认|压缩表<br/>空间索引技术




### 复制

主从复制。主要涉及三个线程。
- binlog 线程 ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。
- I/O 线程 ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。
- SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。

读写分离：主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。




### JDBC
架构
- 双层架构：Java Applet 或应用直接访问数据源。
- 三层架构：侧架构特殊之处在于，引入中间层服务。可以增加企业数据的访问控制，以及多种类型的更新；另外，也可简化应用的部署，并在多数情况下有性能优势。

编程步骤
1. 加载驱动程序；
   - `Class.forName(driverClass)`
2. 获得数据库连接；
3. 创建 Statement\PreparedStatement 对象；
   - `PreparedStatement`：表示预编译的 SQL 语句的对象，然后可以使用此对象多次高效地执行该语句。批处理比 Statement 效率高。
   - `Statement`：用于执行静态 SQL 语句并返回它所生成结果的对象。
4. 执行 SQL 语句；
   - `executeQuery`：用于产生单个结果集的语句，例如 `SELECT` 语句。返回值是 `ResultSet`。
   - `executeUpdate`：用于执行 `INSERT`、`UPDATE` 或 `DELETE` 语句以及 SQL DDL（数据定义语言）语句，例如 `CREATE TABLE` 和 `DROP TABLE`。返回值是一个整数，指示受影响的行数（即更新计数）。
   - `execute`：用于执行返回多个结果集、多个更新计数或二者组合的语句。
5. 如果有数据，从 `ResultSet` 中获取数据。