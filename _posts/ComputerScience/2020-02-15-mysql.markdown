---
layout: post
title:  "【DB】数据库 总结 02 MySQL"
crawlertitle: "MySQL"
summary: "Database——MySQL"
date:   2020-02-15 09:00:00 +0800
categories: posts
tags: 'CS'
author: xusc
bg: "CS.jpg"
---

`MySQL` 是一种关系型数据库管理系统，使用标准数据库查询语言 SQL。

### 索引
索引是在存储引擎层实现的，而不是在服务器层实现的，所以不同存储引擎具有不同的索引类型和实现。

1. B+Tree索引
   - B+Tree 是大多数 MySQL 存储引擎的默认索引类型。适用于全键值、键值范围和键最左前缀查找，否则索引会失效。
   - 除了用于查找，还可以用于排序和分组。
   - InnoDB 的 B+Tree 索引分为主索引和辅助索引。
     - 主索引的叶子节点 data 域记录着完整的数据记录，这种索引方式被称为聚簇索引。因为无法把数据行存放在两个不同的地方，所以一个表只能有一个聚簇索引。
     - 辅助索引的叶子节点的 data 域记录着主键的值，因此在使用辅助索引进行查找时，需要先查找到主键值，然后再到主索引中进行查找。
   - 比之红黑树的优势：
     1. 更少的查找次数；
     2. 利用磁盘预读特性。
2. 哈希索引：InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+Tree 索引之上再创建一个哈希索引。
3. 全文索引用于查找文本中的关键词，而不是直接比较是否相等。
4. 空间数据索引：MyISAM 存储引擎支持空间数据索引（R-Tree），可以用于地理数据存储。

索引优化
1. 在进行查询时，索引列不能是表达式的一部分，也不能是函数的参数。
2. 在需要使用多个列作为条件进行查询时，使用多列索引比使用多个单列索引性能更好。
3. 让选择性（不重复的索引值和记录总数的比值。选择性越高，每个记录的区分度越高，查询效率也越高。）最强的索引列放在前面。
4. 对于 BLOB、TEXT 和 VARCHAR 类型的列，必须使用前缀索引。
5. 索引包含所有需要查询的字段的值。

### 存储引擎

- InnoDB 是 MySQL 默认的事务型存储引擎，只有在需要它不支持的特性时，才考虑使用其它存储引擎。实现了四个标准的隔离级别，默认级别是可重复读（REPEATABLE READ）。在可重复读隔离级别下，通过多版本并发控制（MVCC）+ Next-Key Locking 防止幻读。主索引是聚簇索引。
- MyISAM 设计简单，数据以紧密格式存储。

比较|InnoDB|MyISAM
:-:|:-:|:-:
事务|支持|不支持
并发|表级锁<br/>行级锁|表级锁
外键|支持|不支持
备份|在线热备份| 
崩溃恢复|快|慢
其它| |压缩表<br/>空间索引技术

### 数据类型
1. 整型：TINYINT - 8，SMALLINT - 16，MEDIUMINT - 24，INT - 32，BIGINT - 64。
2. 浮点型：FLOAT 和 DOUBLE 为浮点类型，DECIMAL 为高精度小数类型。
3. 字符串：CHAR - 定长，VARCHAR - 变长。
4. 时间日期：DATETIME 和 TIMESTAMP。


### 复制

主从复制。主要涉及三个线程。
- binlog 线程 ：负责将主服务器上的数据更改写入二进制日志（Binary log）中。
- I/O 线程 ：负责从主服务器上读取二进制日志，并写入从服务器的中继日志（Relay log）。
- SQL 线程 ：负责读取中继日志，解析出主服务器已经执行的数据更改并在从服务器中重放（Replay）。

读写分离：主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。